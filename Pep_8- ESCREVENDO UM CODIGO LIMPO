Escrevendo um cogigo limpo
 
# Nomes sensatos
# Nunca use l, O, ou I nomes de uma única letra, pois podem ser confundidos com 1 e 0, dependendo do tipo de letra:
0 = 2  # Por que 0 seria igual a 2 ? não tem motivo. use o 2 diretamente ou explique a utilidade dele

# Estilo de nomenclaturas

Função	       Use uma palavra ou palavras minúsculas.             EX
               Separe as palavras por sublinhados para 
               melhorar a legibilidade.                      funcao, minha_funcao

Variável	   Use uma única letra minúscula, palavra              EX
               ou palavras. Separe as palavras com
               sublinhados para melhorar a legibilidade.	 x, var, minha_variavel

Classe	       Comece cada palavra com uma letra                   EX
               maiúscula. Não separe palavras com 
               sublinhados. Este estilo é chamado de 
               camel case ou pascal case .	                 Modelo, MinhaClasse

Método	       Use uma palavra ou palavras minúsculas.             EX
               Separe as palavras com sublinhados para
               melhorar a legibilidade.	                     class_metodo, metodo

Constante	   Use uma única letra maiúscula, palavra              EX
               ou palavras. Separe as palavras com 
               sublinhados para melhorar a legibilidade.     CONSTANTEMY_CONSTANT 
                                                             MINHA_LONGA_CONSTANTE

Módulo	       Use uma palavra ou palavras curtas e                EX
               minúsculas. Separe as palavras com 
               sublinhados para melhorar a legibilidade.	 module.py,my_module.py

Pacote	       Use uma palavra ou palavras curtas e                EX
               minúsculas. Não separe palavras com  
               sublinhados.	                                 package,mypackage

# Como escolher nomes

Escolher nomes para suas variáveis, funções, classes e assim por diante pode ser um desafio. Você deve pensar bastante em suas escolhas de nomenclatura ao escrever o código, pois isso tornará seu código mais legível. A melhor maneira de nomear seus objetos em Python é usar nomes descritivos para deixar claro o que o objeto representa.

Ao nomear variáveis, você pode ficar tentado a escolher nomes simples de letras minúsculas, como x. Mas, a menos que você esteja usando xcomo argumento de uma função matemática, não está claro o que xrepresenta. Imagine que você está armazenando o nome de uma pessoa como uma string e deseja usar o fatiamento de string para formatar seu nome de maneira diferente. Você pode acabar com algo assim:

>>> # Not recommended 
>>> x = 'John Smith'
>>> y, z = x.split()
>>> print(z, y, sep=', ')
'Smith, John'

>>> # Recommended
>>> name = 'John Smith'
>>> first_name, last_name = name.split()
>>> print(last_name, first_name, sep=', ')
'Smith, John'

# Abreviando referencias

# Not recommended
def db(x):
    return x * 2

# Recommended
def multiply_by_two(x):
    return x * 2

# Envolva funções e classes de nível superior com duas linhas em branco.
EXEMPLO:

class MyFirstClass:
    pass


class MySecondClass:
    pass


def top_level_function():
    return None

# Envolva as definições de método dentro das classes com uma única linha em branco.
EXEMPLO:

class MyClass:
    def first_method(self):
        return None

    def second_method(self):
        return None

# Use linhas em branco com moderação dentro de funções para mostrar etapas claras. 
EXEMPLO:

def calculate_variance(number_list):
    sum_list = 0
    for number in number_list:
        sum_list = sum_list + number
    mean = sum_list / len(number_list)

    sum_squares = 0
    for number in number_list:
        sum_squares = sum_squares + number**2
    mean_squares = sum_squares / len(number_list)

    return mean_squares - mean**2

# Comprimento máximo de linha e quebra de linha
O PEP 8 sugere que as linhas sejam limitadas a 79 caracteres. Isso ocorre porque permite que você tenha vários arquivos abertos um ao lado do outro, evitando também a quebra de linha.

O Python assumirá a continuação de linha se o código estiver entre parênteses, colchetes ou chaves:

def function(arg_one, arg_two,
             arg_three, arg_four):
    return arg_one

    Se for impossível usar a continuação implícita, você pode usar barras invertidas para quebrar as linhas:

    from mypkg import example1, \
    example2, example3

Abaixo está um exemplo de quebra antes de um operador binário:
# Recomendado
total = (first_variable
         + second_variable
         - third_variable)

# Not Recommended
total = (first_variable +
         second_variable -
         third_variable)

# Recuo
A indentação, ou espaço em branco principal, é extremamente importante em Python. O nível de recuo das linhas de código em Python determina como as instruções são agrupadas.

Considere o seguinte exemplo:

x = 3
if x > 5:
    print('x is larger than 5')

    Use 4 espaços consecutivos para indicar o recuo.
    Prefira espaços em vez de tabulações.

# Tabs vs. Espaços
Como mencionado acima, você deve usar espaços em vez de tabulações ao recuar o código. Você pode ajustar as configurações em seu editor de texto para produzir 4 espaços em vez de um caractere de tabulação, quando você pressiona a Tabtecla.

Se você estiver usando o Python 2 e tiver usado uma mistura de tabulações e espaços para recuar seu código, não verá erros ao tentar executá-lo. Para ajudá-lo a verificar a consistência, você pode adicionar um -tsinalizador ao executar o código Python 2 a partir da linha de comando. O intérprete emitirá avisos quando você for inconsistente com o uso de tabulações e espaços:

# Recuo após quebras de linha
Quando você está usando continuações de linha para manter as linhas com menos de 79 caracteres, é útil usar recuo para melhorar a legibilidade. Ele permite ao leitor distinguir entre duas linhas de código e uma única linha de código que abrange duas linhas. Existem dois estilos de recuo que você pode usar.

A primeira delas é alinhar o bloco recuado com o delimitador de abertura:

def function(arg_one, arg_two,
             arg_three, arg_four):
    return arg_one

x = 5
if (x > 3 and
    x < 10):
    print(x)

Adicione um comentário após a condição final. Devido ao realce de sintaxe na maioria dos editores, isso separará as condições do código aninhado:

x = 5
if (x > 3 and
    x < 10):
    # Both conditions satisfied
    print(x)

Adicione recuo extra na continuação da linha:

x = 5
if (x > 3 and
        x < 10):
    print(x)

# Espaço em branco em torno de operadores binários
Cerque os seguintes operadores binários com um único espaço de cada lado:

Operadores de atribuição ( =, +=, -=e assim por diante)

Comparações ( ==, !=, >, <. >=, <=) e ( is, is not, in, not in)

Booleanos ( and, not, or)

Nota : Quando = é usado para atribuir um valor padrão a um argumento de função, não o coloque entre espaços.

# Recommended
def function(default_parameter=5):
    # ...


# Not recommended
def function(default_parameter = 5):
    # ...

# Para alinhar operadores de atribuição:
# Recommended
var1 = 5
var2 = 6
some_long_var = 7

# Not recommended
var1          = 5
var2          = 6
some_long_var = 7